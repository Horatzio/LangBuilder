//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Studythings\LangBuilder\LangBuilderCore\Transpiler\Grammar\TranspilerGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class TranspilerGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Construct=1, Label=2, BlockStart=3, BlockEnd=4, BlockStartSeparator=5, 
		Anything=6, ConstructDeclarationBlockStart=7, ConstructDeclaration=8;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Construct", "Label", "BlockStart", "BlockEnd", "BlockStartSeparator", 
		"Anything", "ConstructDeclarationBlockStart", "ConstructDeclaration"
	};


	public TranspilerGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TranspilerGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'construct'", "'[a-zA-Z0-9_]+'", "'['", "']'", null, "'.+'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Construct", "Label", "BlockStart", "BlockEnd", "BlockStartSeparator", 
		"Anything", "ConstructDeclarationBlockStart", "ConstructDeclaration"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TranspilerGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TranspilerGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\n', '\x43', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x2', '\x2', 
		'\n', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', 
		'\r', '\b', '\xF', '\t', '\x11', '\n', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x3', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x5', '\x1D', '\x3', '\x2', '\x2', '\x2', '\a', '+', '\x3', 
		'\x2', '\x2', '\x2', '\t', '-', '\x3', '\x2', '\x2', '\x2', '\v', '/', 
		'\x3', '\x2', '\x2', '\x2', '\r', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\xF', ':', '\x3', '\x2', '\x2', '\x2', '\x11', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x13', '\x14', '\a', '\x65', '\x2', '\x2', '\x14', '\x15', '\a', 
		'q', '\x2', '\x2', '\x15', '\x16', '\a', 'p', '\x2', '\x2', '\x16', '\x17', 
		'\a', 'u', '\x2', '\x2', '\x17', '\x18', '\a', 'v', '\x2', '\x2', '\x18', 
		'\x19', '\a', 't', '\x2', '\x2', '\x19', '\x1A', '\a', 'w', '\x2', '\x2', 
		'\x1A', '\x1B', '\a', '\x65', '\x2', '\x2', '\x1B', '\x1C', '\a', 'v', 
		'\x2', '\x2', '\x1C', '\x4', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', 
		'\a', ']', '\x2', '\x2', '\x1E', '\x1F', '\a', '\x63', '\x2', '\x2', '\x1F', 
		' ', '\a', '/', '\x2', '\x2', ' ', '!', '\a', '|', '\x2', '\x2', '!', 
		'\"', '\a', '\x43', '\x2', '\x2', '\"', '#', '\a', '/', '\x2', '\x2', 
		'#', '$', '\a', '\\', '\x2', '\x2', '$', '%', '\a', '\x32', '\x2', '\x2', 
		'%', '&', '\a', '/', '\x2', '\x2', '&', '\'', '\a', ';', '\x2', '\x2', 
		'\'', '(', '\a', '\x61', '\x2', '\x2', '(', ')', '\a', '_', '\x2', '\x2', 
		')', '*', '\a', '-', '\x2', '\x2', '*', '\x6', '\x3', '\x2', '\x2', '\x2', 
		'+', ',', '\a', ']', '\x2', '\x2', ',', '\b', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\a', '_', '\x2', '\x2', '.', '\n', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x30', '\a', '*', '\x2', '\x2', '\x30', '\x31', '\a', '\"', '\x2', 
		'\x2', '\x31', '\x32', '\a', '~', '\x2', '\x2', '\x32', '\x33', '\a', 
		'\"', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x35', '\a', '+', '\x2', '\x2', '\x35', '\x36', '\a', ',', '\x2', '\x2', 
		'\x36', '\f', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', '\x30', 
		'\x2', '\x2', '\x38', '\x39', '\a', '-', '\x2', '\x2', '\x39', '\xE', 
		'\x3', '\x2', '\x2', '\x2', ':', ';', '\x5', '\x3', '\x2', '\x2', ';', 
		'<', '\x5', '\x5', '\x3', '\x2', '<', '=', '\x5', '\a', '\x4', '\x2', 
		'=', '>', '\x5', '\v', '\x6', '\x2', '>', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '?', '@', '\x5', '\xF', '\b', '\x2', '@', '\x41', '\x5', '\r', 
		'\a', '\x2', '\x41', '\x42', '\x5', '\t', '\x5', '\x2', '\x42', '\x12', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
