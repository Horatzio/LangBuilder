//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Studythings\LangBuilder\src\dotNet\LangBuilder\Transpiler\Grammar\TranspilerGrammar.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class TranspilerGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Construct=1, Label=2, BlockStart=3, BlockEnd=4, BlockStartSeparator=5, 
		Anything=6, ConstructDeclarationBlockStart=7, ConstructDeclaration=8;
	public const int
		RULE_program = 0, RULE_statement = 1;
	public static readonly string[] ruleNames = {
		"program", "statement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'construct'", "'[a-zA-Z0-9_]+'", "'['", "']'", null, "'.+'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Construct", "Label", "BlockStart", "BlockEnd", "BlockStartSeparator", 
		"Anything", "ConstructDeclarationBlockStart", "ConstructDeclaration"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TranspilerGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TranspilerGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TranspilerGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TranspilerGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TranspilerGrammarParser.Eof, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4; statement();
				}
				}
				State = 7;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Construct) | (1L << Label) | (1L << BlockStart) | (1L << BlockEnd) | (1L << BlockStartSeparator) | (1L << Anything) | (1L << ConstructDeclarationBlockStart) | (1L << ConstructDeclaration))) != 0) );
			State = 9; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode Construct() { return GetToken(TranspilerGrammarParser.Construct, 0); }
		public ITerminalNode Label() { return GetToken(TranspilerGrammarParser.Label, 0); }
		public ITerminalNode BlockStart() { return GetToken(TranspilerGrammarParser.BlockStart, 0); }
		public ITerminalNode BlockEnd() { return GetToken(TranspilerGrammarParser.BlockEnd, 0); }
		public ITerminalNode BlockStartSeparator() { return GetToken(TranspilerGrammarParser.BlockStartSeparator, 0); }
		public ITerminalNode Anything() { return GetToken(TranspilerGrammarParser.Anything, 0); }
		public ITerminalNode ConstructDeclarationBlockStart() { return GetToken(TranspilerGrammarParser.ConstructDeclarationBlockStart, 0); }
		public ITerminalNode ConstructDeclaration() { return GetToken(TranspilerGrammarParser.ConstructDeclaration, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Construct) | (1L << Label) | (1L << BlockStart) | (1L << BlockEnd) | (1L << BlockStartSeparator) | (1L << Anything) | (1L << ConstructDeclarationBlockStart) | (1L << ConstructDeclaration))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\n', '\x10', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x3', '\x2', '\x6', '\x2', '\b', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', '\t', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x2', '\x2', '\x4', '\x2', '\x4', '\x2', '\x3', '\x3', 
		'\x2', '\x3', '\n', '\x2', '\xE', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\r', '\x3', '\x2', '\x2', '\x2', '\x6', '\b', '\x5', '\x4', '\x3', 
		'\x2', '\a', '\x6', '\x3', '\x2', '\x2', '\x2', '\b', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\t', '\a', '\x3', '\x2', '\x2', '\x2', '\t', '\n', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\v', '\x3', '\x2', '\x2', '\x2', '\v', '\f', 
		'\a', '\x2', '\x2', '\x3', '\f', '\x3', '\x3', '\x2', '\x2', '\x2', '\r', 
		'\xE', '\t', '\x2', '\x2', '\x2', '\xE', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '\t',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
