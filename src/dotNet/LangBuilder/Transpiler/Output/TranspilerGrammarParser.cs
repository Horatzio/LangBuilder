//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Studythings/LangBuilder/src/dotNet/LangBuilder/Transpiler/Grammar/TranspilerGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class TranspilerGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, Newline=4, Whitespace=5, Label=6;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_construct = 2, RULE_label = 3, 
		RULE_blockStart = 4, RULE_blockEnd = 5, RULE_constructDeclarationBlockStart = 6, 
		RULE_constructDeclaration = 7;
	public static readonly string[] ruleNames = {
		"program", "statement", "construct", "label", "blockStart", "blockEnd", 
		"constructDeclarationBlockStart", "constructDeclaration"
	};

	private static readonly string[] _LiteralNames = {
		null, "'construct'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "Newline", "Whitespace", "Label"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TranspilerGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TranspilerGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TranspilerGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TranspilerGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TranspilerGrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITranspilerGrammarVisitor<TResult> typedVisitor = visitor as ITranspilerGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 16;
				statement();
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			State = 21;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstructDeclarationContext constructDeclaration() {
			return GetRuleContext<ConstructDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITranspilerGrammarVisitor<TResult> typedVisitor = visitor as ITranspilerGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			constructDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructContext : ParserRuleContext {
		public ConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_construct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITranspilerGrammarVisitor<TResult> typedVisitor = visitor as ITranspilerGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructContext construct() {
		ConstructContext _localctx = new ConstructContext(Context, State);
		EnterRule(_localctx, 4, RULE_construct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Label() { return GetToken(TranspilerGrammarParser.Label, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITranspilerGrammarVisitor<TResult> typedVisitor = visitor as ITranspilerGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 6, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			Match(Label);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStartContext : ParserRuleContext {
		public BlockStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITranspilerGrammarVisitor<TResult> typedVisitor = visitor as ITranspilerGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStartContext blockStart() {
		BlockStartContext _localctx = new BlockStartContext(Context, State);
		EnterRule(_localctx, 8, RULE_blockStart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockEndContext : ParserRuleContext {
		public BlockEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITranspilerGrammarVisitor<TResult> typedVisitor = visitor as ITranspilerGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockEndContext blockEnd() {
		BlockEndContext _localctx = new BlockEndContext(Context, State);
		EnterRule(_localctx, 10, RULE_blockEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructDeclarationBlockStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstructContext construct() {
			return GetRuleContext<ConstructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStartContext blockStart() {
			return GetRuleContext<BlockStartContext>(0);
		}
		public ConstructDeclarationBlockStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructDeclarationBlockStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITranspilerGrammarVisitor<TResult> typedVisitor = visitor as ITranspilerGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructDeclarationBlockStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructDeclarationBlockStartContext constructDeclarationBlockStart() {
		ConstructDeclarationBlockStartContext _localctx = new ConstructDeclarationBlockStartContext(Context, State);
		EnterRule(_localctx, 12, RULE_constructDeclarationBlockStart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			construct();
			State = 34;
			label();
			State = 35;
			blockStart();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstructDeclarationBlockStartContext constructDeclarationBlockStart() {
			return GetRuleContext<ConstructDeclarationBlockStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockEndContext blockEnd() {
			return GetRuleContext<BlockEndContext>(0);
		}
		public ConstructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITranspilerGrammarVisitor<TResult> typedVisitor = visitor as ITranspilerGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructDeclarationContext constructDeclaration() {
		ConstructDeclarationContext _localctx = new ConstructDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_constructDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			constructDeclarationBlockStart();
			State = 38;
			blockEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\b', '+', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x3', '\x2', '\x6', '\x2', '\x14', '\n', '\x2', '\r', 
		'\x2', '\xE', '\x2', '\x15', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x2', '\x2', '\n', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x2', '\x2', '\x2', '#', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x19', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x1F', '\x3', '\x2', '\x2', '\x2', '\f', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '#', '\x3', '\x2', '\x2', '\x2', '\x10', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x14', '\x5', '\x4', '\x3', '\x2', '\x13', '\x12', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '\x13', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x17', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', 
		'\a', '\x2', '\x2', '\x3', '\x18', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x1A', '\x5', '\x10', '\t', '\x2', '\x1A', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', '\x1C', '\a', '\x3', '\x2', '\x2', '\x1C', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '\b', '\x2', '\x2', 
		'\x1E', '\t', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '\x4', '\x2', 
		'\x2', ' ', '\v', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\a', '\x5', 
		'\x2', '\x2', '\"', '\r', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x5', 
		'\x6', '\x4', '\x2', '$', '%', '\x5', '\b', '\x5', '\x2', '%', '&', '\x5', 
		'\n', '\x6', '\x2', '&', '\xF', '\x3', '\x2', '\x2', '\x2', '\'', '(', 
		'\x5', '\xE', '\b', '\x2', '(', ')', '\x5', '\f', '\a', '\x2', ')', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\x15',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
